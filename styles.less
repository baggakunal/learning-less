@import './styles/variables';

body {
    font: 100% @font-family;
    color: @base-color;
}

.my-div {
    background-color: @purple;
    color: @white;
    height: 100px;
    width: 100%;
}

// Variables can be used in selector names
@my-selector: my-div2;

.@{my-selector} {
    background-color: @blue;
    color: @white;
    height: 200px;
    width: @my-width;
}

// Variables are lazy-loaded, so can be used before they are defined
@my-width: 50%;


.extend-pseudo-example {
    div {
        &:extend(.extend-pseudo-example .blue);
        background-color: #CCC;
    }

    .blue {
        color: blue;
    }

    .class1 {
        color: #F00;
    }

    .class2 {
        font-family: 'Courier New', Courier, monospace;
    }

    // Can extend .class1
    .class3:extend(.extend-pseudo-example .class1) {
        font-size: 20px;
    }

    // Can extend more than one class
    .class4:extend(.extend-pseudo-example .class1, .extend-pseudo-example .class2) {
        font-size: 40px;
    }
}

.flex-align(@v-align, @h-align) {
    display: flex;
    align-items: @v-align;
    justify-content: @h-align;
}
// Creating a mixin with paranthesis will not create a new class (.large-blue-text-mixin) in the generated css
.large-blue-text-mixin() {
    color: @blue;
    font-size: 25px;
}
.div-h-w-mixin {
    height: 200px;
    width: 800px;
}
.mixin-example {
    // Calling a mixin w or w/o paranthesis will not make any difference in the generated css
    .flex-align(center, center);
    .large-blue-text-mixin;
    .div-h-w-mixin();
    background-color: #CCC;
}

.div-h-w-ruleset-mixin(@rules, @h, @w){
    @rules();
    height: @h;
    width: @w;
}
.mixin-w-ruleset-example {
    .div-h-w-ruleset-mixin({
        background-color: @purple;
        color: @white;
        .flex-align(center, center);
    }, 100px, 900px);
}

.recursive-mixin-example {
    display: flex;
    
    div {
        margin: 10px 5px;
        border: 1px solid;

        &:first-child {
            margin-left: 0;
        }
        &:last-child {
            margin-right: 0;
        }
    }

    .create-columns(@n, @i: 1) when (@i <= @n) {
        .column-@{i} {
            flex: @i; 
        }
        .create-columns(@n, @i + 1);
    }
    .create-columns(4);
}

.mixin-guards-example {
    display: flex;
    justify-content: space-between;
    margin: 10px 0;

    .my-column(@w) when (@w <= 200px){
        background-color: #0F0;
    }
    .my-column(@w) when (@w <= 100px){
        background-color: #F00;
    }
    .my-column(@w) when (@w > 200px){
        background-color: #00F;
    }
    .my-column(@w){
        width: @w;
        height: 50px;
        .flex-align(center, center);
    }

    .create-columns(@n, @i: 1) when (@i <= @n) {
        .column-@{i} {
            .my-column(@i * 100px);
        }
        .create-columns(@n, @i + 1);
    }
    .create-columns(3);
}

@guard-flag: true;
.css-guard when (@guard-flag = true) {
    color: #0F0;
}
.css-guard when (@guard-flag = false) {
    color: #F00;
}

.parent-n-combined-selector-example {
    .flex-align(center, space-between);

    div {
        height: 50px;
        width: 150px;
        .flex-align(center, center);
        border: 1px solid #CCC;

        &:hover {
            color: @white;
            background-color: #CCC;
        }
    }

    .my-selector {
        &2 {
            background-color: #F00;
        }
        &3 {
            background-color: #0F0;
        }
        &4 {
            background-color: #00F;
        }
    }
}